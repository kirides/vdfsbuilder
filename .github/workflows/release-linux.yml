name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

defaults:
  run:
    shell: bash

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        go-version: [1.22]

    name: Build & Release ${{ matrix.go-version }} (${{ matrix.os }} ${{ matrix.arch }})

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: try building
        run: go build -v ./...

      - name: Run tests
        run: go test -v ./...

      - name: Setup final build env
        run: |
          export tagName=${GITHUB_REF/refs\/tags\//}
          echo "Tag: ${tagName}"
          echo "RELEASE_VERSION=${tagName}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "GOOS=${{ matrix.os }}" >> $GITHUB_ENV

      - name: Build Windows
        if: matrix.os == 'windows'
        run: |
          export RELEASE_FILE=vdfsbuilder.$GOOS-$GOARCH.exe
          echo "RELEASE_FILE=$RELEASE_FILE" >> $GITHUB_ENV
          go build -v -o $RELEASE_FILE -trimpath -ldflags "-s -w" ./cmd/vdfsbuilder

      - name: Build linux
        if: matrix.os != 'windows'
        run: |
          export RELEASE_FILE=vdfsbuilder.$GOOS-$GOARCH
          echo "RELEASE_FILE=$RELEASE_FILE" >> $GITHUB_ENV
          go build -v -o $RELEASE_FILE -trimpath -ldflags '-extldflags "-static" -s -w' ./cmd/vdfsbuilder

      - name: Calculate distribution hash
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          sha256sum "$RELEASE_FILE" > "$RELEASE_FILE.sha256"
          cat "$RELEASE_FILE.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_FILE }}.zip
          path: |
            ${{ env.RELEASE_FILE }}
            ${{ env.RELEASE_FILE }}.sha256

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Collect artifacts
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -R

      - name: Setup tag
        run: |
          export tagName=${GITHUB_REF/refs\/tags\//}
          echo "Tag: ${tagName}"
          echo "RELEASE_VERSION=${tagName}" >> $GITHUB_ENV

      - name: Create github release
        run: |
          gh release create $RELEASE_VERSION --generate-notes vdfsbuilder.*.zip/*
          exit 0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
